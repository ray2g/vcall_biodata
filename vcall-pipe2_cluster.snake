## Variant Calling Pipeline - JoÃ£o Raimundo @BioData.pt


#|_________________Settings___________________|

#configfile:"/mnt/share/config_pipeline.yaml" # Docker
configfile:"/mnt/config_pipeline2_cluster.yaml" # Shifter


#|_________________Cluster_Configuration____________________________________________|


##__rule_bwa_index___________________________________\\

bwa_index_partition = config["bwa_index_partition"]
bwa_index_cpus = config["bwa_index_cpus"]
bwa_index_mem = config["bwa_index_mem"]


##__rule_BWA_samblaster_sambamba_________________________________________________\\


BWA_samblaster_sambamba_partition = config["BWA_samblaster_sambamba_partition"]
BWA_samblaster_sambamba_threads = config["BWA_samblaster_sambamba_threads"]
BWA_samblaster_sambamba_memory = config["BWA_samblaster_sambamba_memory"]


##_______rule_picard_dict____________________________________\\

picard_dict_partition = config["picard_dict_partition"]
picard_dict_cpus = config["picard_dict_cpus"]
picard_dict_mem = config["picard_dict_mem"]


##______rule_samtools_index___________________________________\\

samtools_index_partition = config["samtools_index_partition"]
samtools_index_cpus = config["samtools_index_cpus"]
samtools_index_mem = config["samtools_index_mem"]


##____Chromossome_Parallelization______________________________\\

# partitions

chr1_partitions = config["chr1_partitions"]
chr2_partitions = config["chr2_partitions"]
chr3_partitions = config["chr3_partitions"]
chr4_partitions = config["chr4_partitions"]
chr5_partitions = config["chr5_partitions"]
chr6_partitions = config["chr6_partitions"]
chr7_partitions = config["chr7_partitions"]
chr8_partitions = config["chr8_partitions"]
chr9_partitions = config["chr9_partitions"]
chr10_partitions = config["chr10_partitions"]
chr11_partitions = config["chr11_partitions"]
chr12_partitions = config["chr12_partitions"]
chr13_partitions = config["chr13_partitions"]
chr14_partitions = config["chr14_partitions"]
chr15_partitions = config["chr15_partitions"]
chr16_partitions = config["chr16_partitions"]
chr17_partitions = config["chr17_partitions"]
chr18_partitions = config["chr18_partitions"]
chr19_partitions = config["chr19_partitions"]
chr20_partitions = config["chr20_partitions"]
chr21_partitions = config["chr21_partitions"]
chr22_partitions = config["chr22_partitions"]
chrX_partitions = config["chrX_partitions"]
chrY_partitions = config["chrY_partitions"]

# cpus

chr1_cpus = config["chr1_cpus"]
chr2_cpus = config["chr2_cpus"]
chr3_cpus = config["chr3_cpus"]
chr4_cpus = config["chr4_cpus"]
chr5_cpus = config["chr5_cpus"]
chr6_cpus = config["chr6_cpus"]
chr7_cpus = config["chr7_cpus"]
chr8_cpus = config["chr8_cpus"]
chr9_cpus = config["chr9_cpus"]
chr10_cpus = config["chr10_cpus"]
chr11_cpus = config["chr11_cpus"]
chr12_cpus = config["chr12_cpus"]
chr13_cpus = config["chr13_cpus"]
chr14_cpus = config["chr14_cpus"]
chr15_cpus = config["chr15_cpus"]
chr16_cpus = config["chr16_cpus"]
chr17_cpus = config["chr17_cpus"]
chr18_cpus = config["chr18_cpus"]
chr19_cpus = config["chr19_cpus"]
chr20_cpus = config["chr20_cpus"]
chr21_cpus = config["chr21_cpus"]
chr22_cpus = config["chr22_cpus"]
chrX_cpus = config["chrX_cpus"]
chrY_cpus = config["chrY_cpus"]

# RAM

chr1_mem = config["chr1_mem"]
chr2_mem = config["chr2_mem"]
chr3_mem = config["chr3_mem"]
chr4_mem = config["chr4_mem"]
chr5_mem = config["chr5_mem"]
chr6_mem = config["chr6_mem"]
chr7_mem = config["chr7_mem"]
chr8_mem = config["chr8_mem"]
chr9_mem = config["chr9_mem"]
chr10_mem = config["chr10_mem"]
chr11_mem = config["chr11_mem"]
chr12_mem = config["chr12_mem"]
chr13_mem = config["chr13_mem"]
chr14_mem = config["chr14_mem"]
chr15_mem = config["chr15_mem"]
chr16_mem = config["chr16_mem"]
chr17_mem = config["chr17_mem"]
chr18_mem = config["chr18_mem"]
chr19_mem = config["chr19_mem"]
chr20_mem = config["chr20_mem"]
chr21_mem = config["chr21_mem"]
chr22_mem = config["chr22_mem"]
chrX_mem = config["chrX_mem"]
chrY_mem = config["chrY_mem"]


##_______rule_Merge_VCFs______________________________\\

merge_vcf_partition = config["merge_vcf_partition"]
merge_vcf_cpus = config["merge_vcf_cpus"]
merge_vcf_mem = config["merge_vcf_mem"]


##_______rule_Merge_Recalibrated_VCFs________________________________________\\

merge_recalibrated_vcf_partition = config["merge_recalibrated_vcf_partition"]
merge_recalibrated_vcf_cpus = config["merge_recalibrated_vcf_cpus"]
merge_recalibrated_vcf_mem = config["merge_recalibrated_vcf_mem"]


##_______rule_Calculate_Genotype_Posteriors________________________________________\\

genotype_posteriors_partition = config["genotype_posteriors_partition"]
genotype_posteriors_cpus = config["genotype_posteriors_cpus"]
genotype_posteriors_mem = config["genotype_posteriors_mem"]


#|__________Directory_Settings_______________________________________________________|

base_dir = config["base_dir"]
main_dir = config["main_dir"] 
genome_dir = config["genome_dir"]
sample_dir = config["sample_dir"] 
output_dir = config["output_dir"] 
logs_dir = config["logs_dir"]

GENOME = config["GENOME"]
KS1 = config["KS1"]
KS2 = config["KS2"]
KS3 = config["KS3"]
KS4 = config["KS4"]
KS5 = config["KS5"]
KS6 = config["KS6"]
KS7 = config["KS7"]

# Genome target files
TARGET_all_chr = config["TARGET_all_chr"]
TARGET_chr1 = config["TARGET_chr1"]
TARGET_chr2 = config["TARGET_chr2"]
TARGET_chr3 = config["TARGET_chr3"]
TARGET_chr4 = config["TARGET_chr4"]
TARGET_chr5 = config["TARGET_chr5"]
TARGET_chr6 = config["TARGET_chr6"]
TARGET_chr7 = config["TARGET_chr7"]
TARGET_chr8 = config["TARGET_chr8"]
TARGET_chr9 = config["TARGET_chr9"]
TARGET_chr10 = config["TARGET_chr10"]
TARGET_chr11 = config["TARGET_chr11"]
TARGET_chr12 = config["TARGET_chr12"]
TARGET_chr13 = config["TARGET_chr13"]
TARGET_chr14 = config["TARGET_chr14"]
TARGET_chr15 = config["TARGET_chr15"]
TARGET_chr16 = config["TARGET_chr16"]
TARGET_chr17 = config["TARGET_chr17"]
TARGET_chr18 = config["TARGET_chr18"]
TARGET_chr19 = config["TARGET_chr19"]
TARGET_chr20 = config["TARGET_chr20"]
TARGET_chr21 = config["TARGET_chr21"]
TARGET_chr22 = config["TARGET_chr22"]
TARGET_chrX = config["TARGET_chrX"]
TARGET_chrY = config["TARGET_chrY"]


# GATK Tools
GATK = config["GATK"]


#|____________________Rules_________________________________________________________|

rule bwa_index: # Create index, fasta.sa
	input:
		fa = main_dir + genome_dir + GENOME + ".fasta"
	output:
		main_dir + genome_dir + GENOME + '.fasta.sa'
	message:
		'Building index -> {output}'
	params: partition = bwa_index_partition
	resources: cpus= bwa_index_cpus, mem_mb= bwa_index_mem
	shell:
		'bwa index {input.fa}' 
		
		
rule BWA_samblaster_sambamba: # Align reads to reference (using BWA); 
	input:
		index = main_dir + genome_dir + GENOME + '.fasta.sa',
		ref = main_dir + genome_dir + GENOME + '.fasta',
		r_fow = main_dir + sample_dir + '{sample}.read1.fastq.gz', #R1
		r_rev = main_dir + sample_dir + '{sample}.read2.fastq.gz'  #R2
	output:
		align = main_dir + output_dir + '{sample}.alignment.bam'
	message:
		'Creating Alignment -> {output}'
	params: partition = BWA_samblaster_sambamba_partition  
	resources: cpus= BWA_samblaster_sambamba_threads, mem_mb= BWA_samblaster_sambamba_memory 
	shell: 
		'bwa mem -t {resources.cpus} -R "@RG\\tID:{wildcards.sample}\\tPL:ILLUMINA\\tSM:{wildcards.sample}" -M {input.ref} {input.r_fow} {input.r_rev} | '
		'samblaster -M |'
		'sambamba view -S -f bam -l 0 /dev/stdin |'
		'sambamba sort -m {resources.mem_mb}MB -t {resources.cpus} -o {output.align} /dev/stdin 2>&1'
		
		
		
rule picard_dict:
	input:
		main_dir + genome_dir + GENOME + '.fasta'
	output:
		main_dir + genome_dir + GENOME + '.dict'
	message:
		'Creating Dictionary with Picard -> {output}'
	params: partition = picard_dict_partition
	resources: cpus= picard_dict_cpus, mem_mb= picard_dict_mem 
	shell:
		'picard CreateSequenceDictionary R={input} O={output}'
		
		
rule samtools_index:
	input:
		main_dir + genome_dir + GENOME + '.fasta'
	output:
		main_dir + genome_dir + GENOME + '.fasta.fai'
	message:
		'Creating index genome fasta file -> {output}'
	params: partition = samtools_index_partition
	resources: cpus= samtools_index_cpus, mem_mb= samtools_index_mem
	shell:
		'samtools faidx {input}'
		
		
##_______Target_Genome_Parallelization_____________________________________________________________|
		
###__________BaseRecalibrator1_________________________________#
		
rule gatk_BaseRecalibrator1_chr1: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr1
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr1.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr1.qsub'
	message:
		'Processing the first Base Recalibration for chr1 -> {output}'
	params: partition = chr1_partitions
	resources: cpus= chr1_cpus, mem_mb= chr1_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr2: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr2
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr2.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr2.qsub'
	message:
		'Processing the first Base Recalibration for chr2 -> {output}'
	params: partition = chr2_partitions
	resources: cpus= chr2_cpus, mem_mb= chr2_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr3: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr3
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr3.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr3.qsub'
	message:
		'Processing the first Base Recalibration for chr3 -> {output}'
	params: partition = chr3_partitions
	resources: cpus= chr3_cpus, mem_mb= chr3_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr4: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr4
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr4.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr4.qsub'
	message:
		'Processing the first Base Recalibration for chr4 -> {output}'
	params: partition = chr4_partitions
	resources: cpus= chr4_cpus, mem_mb= chr4_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr5: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr5
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr5.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr5.qsub'
	message:
		'Processing the first Base Recalibration for chr5 -> {output}'
	params: partition = chr5_partitions
	resources: cpus= chr5_cpus, mem_mb= chr5_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr6: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr6
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr6.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr6.qsub'
	message:
		'Processing the first Base Recalibration for chr6 -> {output}'
	params: partition = chr6_partitions
	resources: cpus= chr6_cpus, mem_mb= chr6_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr7: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr7
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr7.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr7.qsub'
	message:
		'Processing the first Base Recalibration for chr7 -> {output}'
	params: partition = chr7_partitions
	resources: cpus= chr7_cpus, mem_mb= chr7_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr8: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr8
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr8.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr8.qsub'
	message:
		'Processing the first Base Recalibration for chr8 -> {output}'
	params: partition = chr8_partitions
	resources: cpus= chr8_cpus, mem_mb= chr8_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr9: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr9
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr9.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr9.qsub'
	message:
		'Processing the first Base Recalibration for chr9 -> {output}'
	params: partition = chr9_partitions
	resources: cpus= chr9_cpus, mem_mb= chr9_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr10: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr10
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr10.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr10.qsub'
	message:
		'Processing the first Base Recalibration for chr10 -> {output}'
	params: partition = chr10_partitions
	resources: cpus= chr10_cpus, mem_mb= chr10_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr11: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr11
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr11.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr11.qsub'
	message:
		'Processing the first Base Recalibration for chr11 -> {output}'
	params: partition = chr11_partitions
	resources: cpus= chr11_cpus, mem_mb= chr11_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr12: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr12
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr12.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr12.qsub'
	message:
		'Processing the first Base Recalibration for chr12 -> {output}'
	params: partition = chr12_partitions
	resources: cpus= chr12_cpus, mem_mb= chr12_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr13: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr13
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr13.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr13.qsub'
	message:
		'Processing the first Base Recalibration for chr13 -> {output}'
	params: partition = chr13_partitions
	resources: cpus= chr13_cpus, mem_mb= chr13_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr14: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr14
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr14.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr14.qsub'
	message:
		'Processing the first Base Recalibration for chr14 -> {output}'
	params: partition = chr14_partitions
	resources: cpus= chr14_cpus, mem_mb= chr14_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr15: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr15
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr15.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr15.qsub'
	message:
		'Processing the first Base Recalibration for chr15 -> {output}'
	params: partition = chr15_partitions
	resources: cpus= chr15_cpus, mem_mb= chr15_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr16: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr16
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr16.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr16.qsub'
	message:
		'Processing the first Base Recalibration for chr16 -> {output}'
	params: partition = chr16_partitions
	resources: cpus= chr16_cpus, mem_mb= chr16_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr17: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr17
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr17.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr17.qsub'
	message:
		'Processing the first Base Recalibration for chr17 -> {output}'
	params: partition = chr17_partitions
	resources: cpus= chr17_cpus, mem_mb= chr17_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr18: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr18
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr18.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr18.qsub'
	message:
		'Processing the first Base Recalibration for chr18 -> {output}'
	params: partition = chr18_partitions
	resources: cpus= chr18_cpus, mem_mb= chr18_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr19: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr19
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr19.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr19.qsub'
	message:
		'Processing the first Base Recalibration for chr19 -> {output}'
	params: partition = chr19_partitions
	resources: cpus= chr19_cpus, mem_mb= chr19_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr20: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr20
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr20.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr20.qsub'
	message:
		'Processing the first Base Recalibration for chr20 -> {output}'
	params: partition = chr20_partitions
	resources: cpus= chr20_cpus, mem_mb= chr20_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr21: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr21
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr21.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr21.qsub'
	message:
		'Processing the first Base Recalibration for chr21 -> {output}'
	params: partition = chr21_partitions
	resources: cpus= chr21_cpus, mem_mb= chr21_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chr22: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chr22
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chr22.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chr22.qsub'
	message:
		'Processing the first Base Recalibration for chr22 -> {output}'
	params: partition = chr22_partitions
	resources: cpus= chr22_cpus, mem_mb= chr22_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chrX: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chrX
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chrX.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chrX.qsub'
	message:
		'Processing the first Base Recalibration for chrX -> {output}'
	params: partition = chrX_partitions
	resources: cpus= chrX_cpus, mem_mb= chrX_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator1_chrY: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET_chrY
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data_chrY.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal_chrY.qsub'
	message:
		'Processing the first Base Recalibration for chrY -> {output}'
	params: partition = chrY_partitions
	resources: cpus= chrY_cpus, mem_mb= chrY_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
###__________BaseRecalibrator2_________________________________#
		
		
rule gatk_BaseRecalibrator2_chr1: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr1.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr1
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr1.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr1.qsub'
	message:
		'Processing the second Base Recalibration for chr1 -> {output}'
	params: partition = chr1_partitions
	resources: cpus= chr1_cpus, mem_mb= chr1_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr2: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr2.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr2
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr2.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr2.qsub'
	message:
		'Processing the second Base Recalibration for chr2 -> {output}'
	params: partition = chr2_partitions
	resources: cpus= chr2_cpus, mem_mb= chr2_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr3: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr3.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr3
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr3.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr3.qsub'
	message:
		'Processing the second Base Recalibration for chr3 -> {output}'
	params: partition = chr3_partitions
	resources: cpus= chr3_cpus, mem_mb= chr3_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr4: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr4.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr4
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr4.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr4.qsub'
	message:
		'Processing the second Base Recalibration for chr4 -> {output}'
	params: partition = chr4_partitions
	resources: cpus= chr4_cpus, mem_mb= chr4_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr5: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr5.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr5
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr5.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr5.qsub'
	message:
		'Processing the second Base Recalibration for chr5 -> {output}'
	params: partition = chr5_partitions
	resources: cpus= chr5_cpus, mem_mb= chr5_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr6: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr6.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr6
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr6.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr6.qsub'
	message:
		'Processing the second Base Recalibration for chr6 -> {output}'
	params: partition = chr6_partitions
	resources: cpus= chr6_cpus, mem_mb= chr6_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr7: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr7.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr7
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr7.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr7.qsub'
	message:
		'Processing the second Base Recalibration for chr7 -> {output}'
	params: partition = chr7_partitions
	resources: cpus= chr7_cpus, mem_mb= chr7_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr8: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr8.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr8
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr8.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr8.qsub'
	message:
		'Processing the second Base Recalibration for chr8 -> {output}'
	params: partition = chr8_partitions
	resources: cpus= chr8_cpus, mem_mb= chr8_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr9: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr9.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr9
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr9.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr9.qsub'
	message:
		'Processing the second Base Recalibration for chr9 -> {output}'
	params: partition = chr9_partitions
	resources: cpus= chr9_cpus, mem_mb= chr9_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr10: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr10.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr10
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr10.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr10.qsub'
	message:
		'Processing the second Base Recalibration for chr10 -> {output}'
	params: partition = chr10_partitions
	resources: cpus= chr10_cpus, mem_mb= chr10_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
rule gatk_BaseRecalibrator2_chr11: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr11.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr11
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr11.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr11.qsub'
	message:
		'Processing the second Base Recalibration for chr11 -> {output}'
	params: partition = chr11_partitions
	resources: cpus= chr11_cpus, mem_mb= chr11_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr12: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr12.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr12
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr12.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr12.qsub'
	message:
		'Processing the second Base Recalibration for chr12 -> {output}'
	params: partition = chr12_partitions
	resources: cpus= chr12_cpus, mem_mb= chr12_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr13: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr13.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr13
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr13.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr13.qsub'
	message:
		'Processing the second Base Recalibration for chr13 -> {output}'
	params: partition = chr13_partitions
	resources: cpus= chr13_cpus, mem_mb= chr13_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr14: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr14.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr14
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr14.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr14.qsub'
	message:
		'Processing the second Base Recalibration for chr14 -> {output}'
	params: partition = chr14_partitions
	resources: cpus= chr14_cpus, mem_mb= chr14_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr15: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr15.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr15
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr15.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr15.qsub'
	message:
		'Processing the second Base Recalibration for chr15 -> {output}'
	params: partition = chr15_partitions
	resources: cpus= chr15_cpus, mem_mb= chr15_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr16: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr1.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr16
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr16.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr16.qsub'
	message:
		'Processing the second Base Recalibration for chr16 -> {output}'
	params: partition = chr16_partitions
	resources: cpus= chr16_cpus, mem_mb= chr16_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr17: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr17.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr17
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr17.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr17.qsub'
	message:
		'Processing the second Base Recalibration for chr17 -> {output}'
	params: partition = chr17_partitions
	resources: cpus= chr17_cpus, mem_mb= chr17_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr18: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr1.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr18
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr18.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr18.qsub'
	message:
		'Processing the second Base Recalibration for chr18 -> {output}'
	params: partition = chr18_partitions
	resources: cpus= chr18_cpus, mem_mb= chr18_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr19: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr1.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr19
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr19.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr19.qsub'
	message:
		'Processing the second Base Recalibration for chr19 -> {output}'
	params: partition = chr19_partitions
	resources: cpus= chr19_cpus, mem_mb= chr19_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr20: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr20.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr20
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr20.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr20.qsub'
	message:
		'Processing the second Base Recalibration for chr20 -> {output}'
	params: partition = chr20_partitions
	resources: cpus= chr20_cpus, mem_mb= chr20_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr21: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr21.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr21
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr21.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr21.qsub'
	message:
		'Processing the second Base Recalibration for chr21 -> {output}'
	params: partition = chr21_partitions
	resources: cpus= chr21_cpus, mem_mb= chr21_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chr22: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr22.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chr22
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr22.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chr22.qsub'
	message:
		'Processing the second Base Recalibration for chr22 -> {output}'
	params: partition = chr22_partitions
	resources: cpus= chr22_cpus, mem_mb= chr22_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chrX: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chrX.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chrX
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chrX.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chrX.qsub'
	message:
		'Processing the second Base Recalibration for chrX -> {output}'
	params: partition = chrX_partitions
	resources: cpus= chrX_cpus, mem_mb= chrX_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2_chrY: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chrY.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET_chrY
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chrY.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2_chrY.qsub'
	message:
	params: partition = chrY_partitions
	resources: cpus= chrY_cpus, mem_mb= chrY_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
###_______________________________Analyze_Covariates__________________________________________________________#
		
		
rule Analyze_Covariates_chr1:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr1.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr1.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr1.pdf'
	message:
		'Analyzing Covariates for chr1 -> {output}'
	params: partition = chr1_partitions
	resources: cpus= chr1_cpus, mem_mb= chr1_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr2:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr2.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr2.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr2.pdf'
	message:
		'Analyzing Covariates for chr2 -> {output}'
	params: partition = chr2_partitions
	resources: cpus= chr2_cpus, mem_mb= chr2_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr3:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr3.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr3.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr3.pdf'
	message:
		'Analyzing Covariates for chr3 -> {output}'
	params: partition = chr3_partitions
	resources: cpus= chr3_cpus, mem_mb= chr3_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr4:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr4.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr4.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr4.pdf'
	message:
		'Analyzing Covariates for chr4 -> {output}'
	params: partition = chr4_partitions
	resources: cpus= chr4_cpus, mem_mb= chr4_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr5:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr5.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr5.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr5.pdf'
	message:
		'Analyzing Covariates for chr5 -> {output}'
	params: partition = chr5_partitions
	resources: cpus= chr5_cpus, mem_mb= chr5_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr6:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr6.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr6.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr6.pdf'
	message:
		'Analyzing Covariates for chr6 -> {output}'
	params: partition = chr6_partitions
	resources: cpus= chr6_cpus, mem_mb= chr6_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr7:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr7.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr7.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr7.pdf'
	message:
		'Analyzing Covariates for chr7 -> {output}'
	params: partition = chr7_partitions
	resources: cpus= chr7_cpus, mem_mb= chr7_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr8:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr8.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr8.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr8.pdf'
	message:
		'Analyzing Covariates for chr8 -> {output}'
	params: partition = chr8_partitions
	resources: cpus= chr8_cpus, mem_mb= chr8_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr9:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr9.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr9.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr9.pdf'
	message:
		'Analyzing Covariates for chr9 -> {output}'
	params: partition = chr9_partitions
	resources: cpus= chr9_cpus, mem_mb= chr9_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr10:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr10.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr10.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr10.pdf'
	message:
		'Analyzing Covariates for chr10 -> {output}'
	params: partition = chr10_partitions
	resources: cpus= chr10_cpus, mem_mb= chr10_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr11:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr11.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr11.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr11.pdf'
	message:
		'Analyzing Covariates for chr11 -> {output}'
	params: partition = chr11_partitions
	resources: cpus= chr11_cpus, mem_mb= chr11_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr12:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr12.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr12.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr12.pdf'
	message:
		'Analyzing Covariates for chr12 -> {output}'
	params: partition = chr12_partitions
	resources: cpus= chr12_cpus, mem_mb= chr12_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr13:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr13.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr13.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr13.pdf'
	message:
		'Analyzing Covariates for chr13 -> {output}'
	params: partition = chr13_partitions
	resources: cpus= chr13_cpus, mem_mb= chr13_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr14:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr14.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr14.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr14.pdf'
	message:
		'Analyzing Covariates for chr14 -> {output}'
	params: partition = chr14_partitions
	resources: cpus= chr14_cpus, mem_mb= chr14_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr15:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr15.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr15.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr15.pdf'
	message:
		'Analyzing Covariates for chr15 -> {output}'
	params: partition = chr15_partitions
	resources: cpus= chr15_cpus, mem_mb= chr15_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
		
rule Analyze_Covariates_chr16:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr16.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr16.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr16.pdf'
	message:
		'Analyzing Covariates for chr16 -> {output}'
	params: partition = chr16_partitions
	resources: cpus= chr16_cpus, mem_mb= chr16_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
		
rule Analyze_Covariates_chr17:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr17.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr17.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr17.pdf'
	message:
		'Analyzing Covariates for chr17 -> {output}'
	params: partition = chr17_partitions
	resources: cpus= chr17_cpus, mem_mb= chr17_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr18:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr18.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr18.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr18.pdf'
	message:
		'Analyzing Covariates for chr18 -> {output}'
	params: partition = chr18_partitions
	resources: cpus= chr18_cpus, mem_mb= chr18_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr19:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr19.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr19.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr19.pdf'
	message:
		'Analyzing Covariates for chr19 -> {output}'
	params: partition = chr19_partitions
	resources: cpus= chr19_cpus, mem_mb= chr19_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr20:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr20.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr20.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr20.pdf'
	message:
		'Analyzing Covariates for chr20 -> {output}'
	params: partition = chr20_partitions
	resources: cpus= chr20_cpus, mem_mb= chr20_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr21:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr21.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr21.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr21.pdf'
	message:
		'Analyzing Covariates for chr21 -> {output}'
	params: partition = chr21_partitions
	resources: cpus= chr21_cpus, mem_mb= chr21_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chr22:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr22.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chr22.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr22.pdf'
	message:
		'Analyzing Covariates for chr22 -> {output}'
	params: partition = chr22_partitions
	resources: cpus= chr22_cpus, mem_mb= chr22_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chrX:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chrX.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chrX.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chrX.pdf'
	message:
		'Analyzing Covariates for chrX -> {output}'
	params: partition = chrX_partitions
	resources: cpus= chrX_cpus, mem_mb= chrX_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
rule Analyze_Covariates_chrY:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chrY.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data_chrY.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots_chr1.pdf'
	message:
		'Analyzing Covariates for chrY -> {output}'
	params: partition = chrY_partitions
	resources: cpus= chrY_cpus, mem_mb= chrY_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		
		
###__________Apply_Base_Quality_Score_Recalibration_________________________________________________________#
		
		
rule Apply_BQSR_chr1: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr1.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr1.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr1.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr1  -> {output}'
	params: partition = chr1_partitions
	resources: cpus= chr1_cpus, mem_mb= chr1_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr2: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr2.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr2.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr2.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr2  -> {output}'
	params: partition = chr2_partitions
	resources: cpus= chr2_cpus, mem_mb= chr2_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr3: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr3.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr3.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr3.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr3  -> {output}'
	params: partition = chr3_partitions
	resources: cpus= chr3_cpus, mem_mb= chr3_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr4: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr4.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr4.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr4.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr4  -> {output}'
	params: partition = chr4_partitions
	resources: cpus= chr4_cpus, mem_mb= chr4_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr5: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr5.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr5.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr5.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr5  -> {output}'
	params: partition = chr5_partitions
	resources: cpus= chr5_cpus, mem_mb= chr5_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr6: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr6.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr6.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr6.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr6  -> {output}'
	params: partition = chr6_partitions
	resources: cpus= chr6_cpus, mem_mb= chr6_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr7: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr7.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr7.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr7.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr7  -> {output}'
	params: partition = chr7_partitions
	resources: cpus= chr7_cpus, mem_mb= chr7_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr8: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr8.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr8.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr8.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr8  -> {output}'
	params: partition = chr8_partitions
	resources: cpus= chr8_cpus, mem_mb= chr8_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr9: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr9.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr9.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr9.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr9  -> {output}'
	params: partition = chr9_partitions
	resources: cpus= chr9_cpus, mem_mb= chr9_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr10: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr1.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr10.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr10.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr10  -> {output}'
	params: partition = chr10_partitions
	resources: cpus= chr10_cpus, mem_mb= chr10_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr11: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr11.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr11.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr11.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr11  -> {output}'
	params: partition = chr11_partitions
	resources: cpus= chr11_cpus, mem_mb= chr11_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr12: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr12.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr12.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr12.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr12  -> {output}'
	params: partition = chr12_partitions
	resources: cpus= chr12cpus, mem_mb= chr12_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr13: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr13.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr13.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr13.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr13  -> {output}'
	params: partition = chr13_partitions
	resources: cpus= chr13_cpus, mem_mb= chr13_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr14: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr14.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr14.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr14.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr14  -> {output}'
	params: partition = chr14_partitions
	resources: cpus= chr14_cpus, mem_mb= chr14_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr15: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr15.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr15.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr15.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr15  -> {output}'
	params: partition = chr15_partitions
	resources: cpus= chr15_cpus, mem_mb= chr15_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr16: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr16.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr16.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr16.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr16  -> {output}'
	params: partition = chr16_partitions
	resources: cpus= chr16_cpus, mem_mb= chr16_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr17: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr17.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr17.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr17.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr17  -> {output}'
	params: partition = chr17_partitions
	resources: cpus= chr17_cpus, mem_mb= chr17_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr18: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr18.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr18.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr18.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr18  -> {output}'
	params: partition = chr18_partitions
	resources: cpus= chr18_cpus, mem_mb= chr18_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr19: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr19.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr19.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr19.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr19  -> {output}'
	params: partition = chr19_partitions
	resources: cpus= chr19_cpus, mem_mb= chr19_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr20: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr20.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr20.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr20.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr20  -> {output}'
	params: partition = chr20_partitions
	resources: cpus= chr20_cpus, mem_mb= chr20_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr21: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr21.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr21.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr21.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr21  -> {output}'
	params: partition = chr21_partitions
	resources: cpus= chr21_cpus, mem_mb= chr21_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chr22: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chr22.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr22.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chr22.qsub'
	message:
		'Applying Base Quality Score Recalibration for chr22  -> {output}'
	params: partition = chr22_partitions
	resources: cpus= chr22_cpus, mem_mb= chr22_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chrX: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chrX.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chrX.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chrX.qsub'
	message:
		'Applying Base Quality Score Recalibration for chrX  -> {output}'
	params: partition = chrX_partitions
	resources: cpus= chrX_cpus, mem_mb= chrX_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Apply_BQSR_chrY: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data_chrY.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chrY.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal_chrY.qsub'
	message:
		'Applying Base Quality Score Recalibration for chrY  -> {output}'
	params: partition = chrY_partitions
	resources: cpus= chrY_cpus, mem_mb= chrY_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
###____________________________Haplotype_Caller____________________________________________________________#
		
		
rule Call_Variants_chr1:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr1.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr1
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr1.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr1.qsub'
	message:
		'Processing Haplotype Caller for chr1 -> {output}'
	params: partition = chr1_partitions
	resources: cpus= chr1_cpus, mem_mb= chr1_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr2:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr2.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr2
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr2.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr2.qsub'
	message:
		'Processing Haplotype Caller for chr2 -> {output}'
	params: partition = chr2_partitions
	resources: cpus= chr2_cpus, mem_mb= chr2_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr3:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr3.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr3
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr3.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr3.qsub'
	message:
		'Processing Haplotype Caller for chr3 -> {output}'
	params: partition = chr3_partitions
	resources: cpus= chr3_cpus, mem_mb= chr3_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr4:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr4.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr4
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr4.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr4.qsub'
	message:
		'Processing Haplotype Caller for chr4 -> {output}'
	params: partition = chr3_partitions
	resources: cpus= chr3_cpus, mem_mb= chr3_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr5:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr5.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr5
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr5.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr5.qsub'
	message:
		'Processing Haplotype Caller for chr5 -> {output}'
	params: partition = chr5_partitions
	resources: cpus= chr5_cpus, mem_mb= chr5_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr6:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr6.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr6
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr6.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr6.qsub'
	message:
		'Processing Haplotype Caller for chr6 -> {output}'
	params: partition = chr6_partitions
	resources: cpus= chr6_cpus, mem_mb= chr6_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr7:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr7.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr7
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr7.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr7.qsub'
	message:
		'Processing Haplotype Caller for chr7 -> {output}'
	params: partition = chr7_partitions
	resources: cpus= chr7_cpus, mem_mb= chr7_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr8:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr8.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr8
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr8.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr8.qsub'
	message:
		'Processing Haplotype Caller for chr8 -> {output}'
	params: partition = chr8_partitions
	resources: cpus= chr8_cpus, mem_mb= chr8_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr9:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr9.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr9
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr9.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr9.qsub'
	message:
		'Processing Haplotype Caller for chr9 -> {output}'
	params: partition = chr9_partitions
	resources: cpus= chr9_cpus, mem_mb= chr9_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr10:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr10.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr10
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr10.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr10.qsub'
	message:
		'Processing Haplotype Caller for chr10 -> {output}'
	params: partition = chr10_partitions
	resources: cpus= chr10_cpus, mem_mb= chr10_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr11:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr11.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr11
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr11.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr11.qsub'
	message:
		'Processing Haplotype Caller for chr11 -> {output}'
	params: partition = chr11_partitions
	resources: cpus= chr11_cpus, mem_mb= chr11_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr12:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr12.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr12
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr12.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr12.qsub'
	message:
		'Processing Haplotype Caller for chr12 -> {output}'
	params: partition = chr12_partitions
	resources: cpus= chr12_cpus, mem_mb= chr12_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr13:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr13.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr13
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr13.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr13.qsub'
	message:
		'Processing Haplotype Caller for chr13 -> {output}'
	params: partition = chr13_partitions
	resources: cpus= chr13_cpus, mem_mb= chr13_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr14:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr14.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr14
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr14.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr14.qsub'
	message:
		'Processing Haplotype Caller for chr14 -> {output}'
	params: partition = chr14_partitions
	resources: cpus= chr14_cpus, mem_mb= chr14_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr15:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr15.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr15
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr15.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr15.qsub'
	message:
		'Processing Haplotype Caller for chr15 -> {output}'
	params: partition = chr15_partitions
	resources: cpus= chr15_cpus, mem_mb= chr15_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {threads} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr16:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr16.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr16
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr16.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr16.qsub'
	message:
		'Processing Haplotype Caller for chr16 -> {output}'
	params: partition = chr16_partitions
	resources: cpus= chr16_cpus, mem_mb= chr16_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr17:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr17.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr17
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr17.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr17.qsub'
	message:
		'Processing Haplotype Caller for chr17 -> {output}'
	params: partition = chr17_partitions
	resources: cpus= chr17_cpus, mem_mb= chr17_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr18:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr18.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr18
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr18.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr18.qsub'
	message:
		'Processing Haplotype Caller for chr18 -> {output}'
	params: partition = chr18_partitions
	resources: cpus= chr18_cpus, mem_mb= chr18_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr19:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr19.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr19
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr19.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr19.qsub'
	message:
		'Processing Haplotype Caller for chr19 -> {output}'
	params: partition = chr19_partitions
	resources: cpus= chr19_cpus, mem_mb= chr19_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr20:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr20.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr20
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr20.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr20.qsub'
	message:
		'Processing Haplotype Caller for chr20 -> {output}'
	params: partition = chr20_partitions
	resources: cpus= chr20_cpus, mem_mb= chr20_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr21:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr21.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr21
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr21.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr21.qsub'
	message:
		'Processing Haplotype Caller for chr21 -> {output}'
	params: partition = chr21_partitions
	resources: cpus= chr21_cpus, mem_mb= chr21_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chr22:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chr22.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chr22
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chr22.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chr22.qsub'
	message:
		'Processing Haplotype Caller for chr22 -> {output}'
	params: partition = chr22_partitions
	resources: cpus= chr22_cpus, mem_mb= chr22_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {threads} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chrX:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chrX.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chrX
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chrX.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chrX.qsub'
	message:
		'Processing Haplotype Caller for chrX -> {output}'
	params: partition = chrX_partitions
	resources: cpus= chrX_cpus, mem_mb= chrX_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
rule Call_Variants_chrY:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal_chrY.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET_chrY
	output:
		site = main_dir + output_dir + '{sample}.gvcf_chrY.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars_chrY.qsub'
	message:
		'Processing Haplotype Caller for chrY -> {output}'
	params: partition = chrY_partitions
	resources: cpus= chrY_cpus, mem_mb= chrY_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {resources.cpus} \
		-O {output.site} \
		-L {input.target}' + ' > {output.logs}'
		
		
###______________________________Joint_Genotyping__________________________________________________________#
		
		      
rule Joint_Genotyping_chr1:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr1.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr1.gz'
	message:
		'Processing Joint Genotyping for chr1 -> {output}'
	params: partition = chr1_partitions
	resources: cpus= chr1_cpus, mem_mb= chr1_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr2:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr2.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr2.gz'
	message:
		'Processing Joint Genotyping for chr2 -> {output}'
	params: partition = chr2_partitions
	resources: cpus= chr2_cpus, mem_mb= chr2_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr3:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr3.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr3.gz'
	message:
		'Processing Joint Genotyping for chr3 -> {output}'
	params: partition = chr3_partitions
	resources: cpus= chr3_cpus, mem_mb= chr3_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr4:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr4.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr4.gz'
	message:
		'Processing Joint Genotyping for chr4 -> {output}'
	params: partition = chr4_partitions
	resources: cpus= chr4_cpus, mem_mb= chr4_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr5:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr5.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr5.gz'
	message:
		'Processing Joint Genotyping for chr 5-> {output}'
	params: partition = chr5_partitions
	resources: cpus= chr5_cpus, mem_mb= chr5_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr6:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr6.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr6.gz'
	message:
		'Processing Joint Genotyping for chr6 -> {output}'
	params: partition = chr6_partitions
	resources: cpus= chr6_cpus, mem_mb= chr6_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr7:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr7.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr7.gz'
	message:
		'Processing Joint Genotyping for chr7 -> {output}'
	params: partition = chr7_partitions
	resources: cpus= chr7_cpus, mem_mb= chr7_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr8:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr8.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr8.gz'
	message:
		'Processing Joint Genotyping for chr8 -> {output}'
	params: partition = chr8_partitions
	resources: cpus= chr8_cpus, mem_mb= chr8_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr9:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr9.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr9.gz'
	message:
		'Processing Joint Genotyping for chr9 -> {output}'
	params: partition = chr9_partitions
	resources: cpus= chr9_cpus, mem_mb= chr9_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr10:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr10.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr10.gz'
	message:
		'Processing Joint Genotyping for chr10 -> {output}'
	params: partition = chr10_partitions
	resources: cpus= chr10_cpus, mem_mb= chr10_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr11:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr11.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr11.gz'
	message:
		'Processing Joint Genotyping for chr11 -> {output}'
	params: partition = chr11_partitions
	resources: cpus= chr11_cpus, mem_mb= chr11_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr12:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr12.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr12.gz'
	message:
		'Processing Joint Genotyping for chr12 -> {output}'
	params: partition = chr12_partitions
	resources: cpus= chr12_cpus, mem_mb= chr12_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr13:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr13.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr13.gz'
	message:
		'Processing Joint Genotyping for chr13 -> {output}'
	params: partition = chr13_partitions
	resources: cpus= chr13_cpus, mem_mb= chr13_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr14:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr14.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr14.gz'
	message:
		'Processing Joint Genotyping for chr14 -> {output}'
	params: partition = chr14_partitions
	resources: cpus= chr14_cpus, mem_mb= chr14_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr15:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr15.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr15.gz'
	message:
		'Processing Joint Genotyping for chr15 -> {output}'
	params: partition = chr15_partitions
	resources: cpus= chr15_cpus, mem_mb= chr15_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr16:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr16.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr16.gz'
	message:
		'Processing Joint Genotyping for chr16 -> {output}'
	params: partition = chr16_partitions
	resources: cpus= chr16_cpus, mem_mb= chr16_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr17:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr17.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr17.gz'
	message:
		'Processing Joint Genotyping for chr17 -> {output}'
	params: partition = chr17_partitions
	resources: cpus= chr17_cpus, mem_mb= chr17_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr18:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr18.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr18.gz'
	message:
		'Processing Joint Genotyping for chr18 -> {output}'
	params: partition = chr18_partitions
	resources: cpus= chr18_cpus, mem_mb= chr18_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr19:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr19.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr19.gz'
	message:
		'Processing Joint Genotyping for chr19 -> {output}'
	params: partition = chr19_partitions
	resources: cpus= chr19_cpus, mem_mb= chr19_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr20:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr20.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr20.gz'
	message:
		'Processing Joint Genotyping for chr20 -> {output}'
	params: partition = chr20_partitions
	resources: cpus= chr20_cpus, mem_mb= chr20_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr21:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr21.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr21.gz'
	message:
		'Processing Joint Genotyping for chr21 -> {output}'
	params: partition = chr21_partitions
	resources: cpus= chr21_cpus, mem_mb= chr21_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chr22:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chr22.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chr22.gz'
	message:
		'Processing Joint Genotyping for chr22 -> {output}'
	params: partition = chr22_partitions
	resources: cpus= chr22_cpus, mem_mb= chr22_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chrX:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chrX.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chrX.gz'
	message:
		'Processing Joint Genotyping for chrX -> {output}'
	params: partition = chrX_partitions
	resources: cpus= chrX_cpus, mem_mb= chrX_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Joint_Genotyping_chrY:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf_chrY.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf_chrY.gz'
	message:
		'Processing Joint Genotyping for chrY -> {output}'
	params: partition = chrY_partitions
	resources: cpus= chrY_cpus, mem_mb= chrY_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
###_______________________________Merge_VCFs_____________________________________________________#
		
		
rule Merge_VCFs:
	input:
		vcf_chr1 = main_dir + output_dir + '{sample}.vcf_chr1.gz',
		vcf_chr2 = main_dir + output_dir + '{sample}.vcf_chr2.gz',
		vcf_chr3 = main_dir + output_dir + '{sample}.vcf_chr3.gz',
		vcf_chr4 = main_dir + output_dir + '{sample}.vcf_chr4.gz',
		vcf_chr5 = main_dir + output_dir + '{sample}.vcf_chr5.gz',
		vcf_chr6 = main_dir + output_dir + '{sample}.vcf_chr6.gz',
		vcf_chr7 = main_dir + output_dir + '{sample}.vcf_chr7.gz',
		vcf_chr8 = main_dir + output_dir + '{sample}.vcf_chr8.gz',
		vcf_chr9 = main_dir + output_dir + '{sample}.vcf_chr9.gz',
		vcf_chr10 = main_dir + output_dir + '{sample}.vcf_chr10.gz',
		vcf_chr11 = main_dir + output_dir + '{sample}.vcf_chr11.gz',
		vcf_chr12 = main_dir + output_dir + '{sample}.vcf_chr12.gz',
		vcf_chr13 = main_dir + output_dir + '{sample}.vcf_chr13.gz',
		vcf_chr14 = main_dir + output_dir + '{sample}.vcf_chr14.gz',
		vcf_chr15 = main_dir + output_dir + '{sample}.vcf_chr15.gz',
		vcf_chr16 = main_dir + output_dir + '{sample}.vcf_chr16.gz',
		vcf_chr17 = main_dir + output_dir + '{sample}.vcf_chr17.gz',
		vcf_chr18 = main_dir + output_dir + '{sample}.vcf_chr18.gz',
		vcf_chr19 = main_dir + output_dir + '{sample}.vcf_chr19.gz',
		vcf_chr20 = main_dir + output_dir + '{sample}.vcf_chr20.gz',
		vcf_chr21 = main_dir + output_dir + '{sample}.vcf_chr21.gz',
		vcf_chr22 = main_dir + output_dir + '{sample}.vcf_chr22.gz',
		vcf_chrX = main_dir + output_dir + '{sample}.vcf_chrX.gz',
		vcf_chrY = main_dir + output_dir + '{sample}.vcf_chrY.gz'
	output:
		merged_vcfs = main_dir + output_dir + '{sample}_vcf.gz'
	message:
		'Merging all Vcfs -> {output}'
	params: partition = merge_vcf_partition
	resources: cpus= merge_vcf_cpus, mem_mb= merge_vcf_mem
	shell:
		'picard MergeVcfs \
		I={input.vcf_chr1} I={input.vcf_chr2} I={input.vcf_chr3} I={input.vcf_chr4} I={input.vcf_chr5} \
		I={input.vcf_chr6} I={input.vcf_chr7} I={input.vcf_chr8} I={input.vcf_chr9} I={input.vcf_chr10} I={input.vcf_chr11} \
		I={input.vcf_chr12} I={input.vcf_chr13} I={input.vcf_chr14} I={input.vcf_chr15} I={input.vcf_chr16} I={input.vcf_chr17} \
		I={input.vcf_chr18} I={input.vcf_chr19} I={input.vcf_chr20} I={input.vcf_chr21} I={input.vcf_chr22} I={input.vcf_chrX} I={input.vcf_chrY} \
		O={output.merged_vcfs}'
		
		
###___________________________Variant_Recalibration_SNPs_______________________________________________________________________________________________________#

		
rule Variant_Recalibrator_SNPs_chr1:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr1.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr1.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr1.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr1.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr1 -> {output}'
	params: partition = chr1_partitions
	resources: cpus= chr1_cpus, mem_mb= chr1_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr2:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr2.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr2.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr2.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr2.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr2 -> {output}'
	params: partition = chr2_partitions
	resources: cpus= chr2_cpus, mem_mb= chr2_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr3:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr3.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr3.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr3.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr3.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr3 -> {output}'
	params: partition = chr3_partitions
	resources: cpus= chr3_cpus, mem_mb= chr3_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr4:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr4.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr4.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr4.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr4.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr4 -> {output}'
	params: partition = chr4_partitions
	resources: cpus= chr4_cpus, mem_mb= chr4_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr5:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr5.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr5.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr5.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr5.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr5 -> {output}'
	params: partition = chr5_partitions
	resources: cpus= chr5_cpus, mem_mb= chr5_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr6:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr6.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr6.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr6.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr6.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr6 -> {output}'
	params: partition = chr6_partitions
	resources: cpus= chr6_cpus, mem_mb= chr6_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr7:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr7.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr7.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr7.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr7.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr7 -> {output}'
	params: partition = chr7_partitions
	resources: cpus= chr7_cpus, mem_mb= chr7_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr8:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr8.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr8.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr8.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr8.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr8 -> {output}'
	params: partition = chr8_partitions
	resources: cpus= chr8_cpus, mem_mb= chr8_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr9:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr9.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr9.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr9.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr9.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr9 -> {output}'
	params: partition = chr9_partitions
	resources: cpus= chr9_cpus, mem_mb= chr9_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr10:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr10.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr10.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr10.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr10.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr10 -> {output}'
	params: partition = chr10_partitions
	resources: cpus= chr10_cpus, mem_mb= chr10_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr11:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr11.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr11.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr11.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr11.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr11 -> {output}'
	params: partition = chr11_partitions
	resources: cpus= chr11_cpus, mem_mb= chr11_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr12:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr12.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr12.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr12.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr12.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr12 -> {output}'
	params: partition = chr12_partitions
	resources: cpus= chr12_cpus, mem_mb= chr12_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr13:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr13.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr13.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr13.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr13.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr13 -> {output}'
	params: partition = chr13_partitions
	resources: cpus= chr13_cpus, mem_mb= chr13_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr14:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr14.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr14.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr14.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr14.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr14 -> {output}'
	params: partition = chr14_partitions
	resources: cpus= chr14_cpus, mem_mb= chr14_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr15:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr15.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr15.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr15.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr15.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr15 -> {output}'
	params: partition = chr15_partitions
	resources: cpus= chr15_cpus, mem_mb= chr15_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr16:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr16.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr16.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr16.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr16.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr16 -> {output}'
	params: partition = chr16_partitions
	resources: cpus= chr16_cpus, mem_mb= chr16_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr17:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr17.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr17.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr17.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr17.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr17 -> {output}'
	params: partition = chr17_partitions
	resources: cpus= chr17_cpus, mem_mb= chr17_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr18:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr18.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr18.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr18.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr18.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr18 -> {output}'
	params: partition = chr18_partitions
	resources: cpus= chr18_cpus, mem_mb= chr18_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr19:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr19.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr19.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr19.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr19.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr19 -> {output}'
	params: partition = chr19_partitions
	resources: cpus= chr19_cpus, mem_mb= chr19_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr20:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr20.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr20.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr20.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr20.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr20 -> {output}'
	params: partition = chr20_partitions
	resources: cpus= chr20_cpus, mem_mb= chr20_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr21:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr21.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr21.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr21.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr21.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr21 -> {output}'
	params: partition = chr21_partitions
	resources: cpus= chr21_cpus, mem_mb= chr21_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chr22:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr22.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr22.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chr22.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr22.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chr22 -> {output}'
	params: partition = chr22_partitions
	resources: cpus= chr22_cpus, mem_mb= chr22_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chrX:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chrX.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chrX.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chrX.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chrX.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chrX -> {output}'
	params: partition = chrX_partitions
	resources: cpus= chrX_cpus, mem_mb= chrX_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Variant_Recalibrator_SNPs_chrY:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chrY.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chrY.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots_chrY.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chrY.tranches'
	message:
		'Processing Variant Recalibration with SNPs for chrY -> {output}'
	params: partition = chrY_partitions
	resources: cpus= chrY_cpus, mem_mb= chrY_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        	--resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
###_______________________________Applying_Recalibration_SNPs____________________________________________________#
		
		
rule Applying_Recalibration_SNPs_chr1:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr1.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr1.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr1.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr1.vcf'
	message:
		'Applying Recalibration with SNPs for chr1 -> {output}'
	params: partition = chr1_partitions
	resources: cpus= chr1_cpus, mem_mb= chr1_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr2:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr2.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr2.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr2.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr2.vcf'
	message:
		'Applying Recalibration with SNPs for chr2 -> {output}'
	params: partition = chr2_partitions
	resources: cpus= chr2_cpus, mem_mb= chr2_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr3:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr3.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr3.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr3.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr3.vcf'
	message:
		'Applying Recalibration with SNPs for chr3 -> {output}'
	params: partition = chr3_partitions
	resources: cpus= chr3_cpus, mem_mb= chr3_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr4:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr4.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr4.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr4.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr4.vcf'
	message:
		'Applying Recalibration with SNPs for chr4 -> {output}'
	params: partition = chr4_partitions
	resources: cpus= chr4_cpus, mem_mb= chr4_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr5:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr5.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr5.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr5.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr5.vcf'
	message:
		'Applying Recalibration with SNPs for chr5 -> {output}'
	params: partition = chr5_partitions
	resources: cpus= chr5_cpus, mem_mb= chr5_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr6:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr6.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr6.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr6.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr6.vcf'
	message:
		'Applying Recalibration with SNPs for chr6 -> {output}'
	params: partition = chr6_partitions
	resources: cpus= chr6_cpus, mem_mb= chr6_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr7:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr7.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr7.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr7.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr7.vcf'
	message:
		'Applying Recalibration with SNPs for chr7 -> {output}'
	params: partition = chr7_partitions
	resources: cpus= chr7_cpus, mem_mb= chr7_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr8:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr8.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr8.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr8.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr8.vcf'
	message:
		'Applying Recalibration with SNPs for chr8 -> {output}'
	params: partition = chr8_partitions
	resources: cpus= chr8_cpus, mem_mb= chr8_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr9:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr9.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr9.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr9.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr9.vcf'
	message:
		'Applying Recalibration with SNPs for chr9 -> {output}'
	params: partition = chr9_partitions
	resources: cpus= chr9_cpus, mem_mb= chr9_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr10:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr10.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr10.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr10.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr10.vcf'
	message:
		'Applying Recalibration with SNPs for chr10 -> {output}'
	params: partition = chr10_partitions
	resources: cpus= chr10_cpus, mem_mb= chr10_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr11:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr11.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr11.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr11.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr11.vcf'
	message:
		'Applying Recalibration with SNPs for chr11 -> {output}'
	params: partition = chr11_partitions
	resources: cpus= chr11_cpus, mem_mb= chr11_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr12:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr12.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr12.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr12.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr12.vcf'
	message:
		'Applying Recalibration with SNPs for chr12 -> {output}'
	params: partition = chr12_partitions
	resources: cpus= chr12_cpus, mem_mb= chr12_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr13:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr13.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr13.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr13.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr13.vcf'
	message:
		'Applying Recalibration with SNPs for chr13 -> {output}'
	params: partition = chr13_partitions
	resources: cpus= chr13_cpus, mem_mb= chr13_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr14:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr14.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr14.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr14.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr14.vcf'
	message:
		'Applying Recalibration with SNPs for chr14 -> {output}'
	params: partition = chr14_partitions
	resources: cpus= chr14_cpus, mem_mb= chr14_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr15:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr15.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr15.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr15.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr15.vcf'
	message:
		'Applying Recalibration with SNPs for chr15 -> {output}'
	params: partition = chr15_partitions
	resources: cpus= chr15_cpus, mem_mb= chr15_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr16:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr16.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr16.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr16.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr16.vcf'
	message:
		'Applying Recalibration with SNPs for chr16 -> {output}'
	params: partition = chr16_partitions
	resources: cpus= chr16_cpus, mem_mb= chr16_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr17:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr17.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr17.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr17.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr17.vcf'
	message:
		'Applying Recalibration with SNPs for chr17 -> {output}'
	params: partition = chr17_partitions
	resources: cpus= chr17_cpus, mem_mb= chr17_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr18:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr18.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr18.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr18.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr18.vcf'
	message:
		'Applying Recalibration with SNPs for chr18 -> {output}'
	params: partition = chr18_partitions
	resources: cpus= chr18_cpus, mem_mb= chr18_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr19:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr19.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr19.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr19.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr19.vcf'
	message:
		'Applying Recalibration with SNPs for chr19 -> {output}'
	params: partition = chr19_partitions
	resources: cpus= chr19_cpus, mem_mb= chr19_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr20:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr20.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr20.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr20.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr20.vcf'
	message:
		'Applying Recalibration with SNPs for chr20 -> {output}'
	params: partition = chr20_partitions
	resources: cpus= chr20_cpus, mem_mb= chr20_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr21:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr21.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr21.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr21.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr21.vcf'
	message:
		'Applying Recalibration with SNPs for chr21 -> {output}'
	params: partition = chr21_partitions
	resources: cpus= chr21_cpus, mem_mb= chr21_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chr22:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chr22.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr22.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chr22.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr22.vcf'
	message:
		'Applying Recalibration with SNPs for chr22 -> {output}'
	params: partition = chr22_partitions
	resources: cpus= chr22_cpus, mem_mb= chr22_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chrX:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chrX.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chrX.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chrX.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chrX.vcf'
	message:
		'Applying Recalibration with SNPs for chrX -> {output}'
	params: partition = chrX_partitions
	resources: cpus= chrX_cpus, mem_mb= chrX_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Applying_Recalibration_SNPs_chrY:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf_chrY.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chrY.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_chrY.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chrY.vcf'
	message:
		'Applying Recalibration with SNPs for chrY -> {output}'
	params: partition = chrY_partitions
	resources: cpus= chrY_cpus, mem_mb= chrY_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
###____________________________Variant_Recalibration_Indels__________________________________________________#
		
		
rule Variant_Recalibrator_Indels_chr1:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr1.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr1.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr1.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr1.R'
	message:
		'Processing Variant Recalibration with Indels for chr1 -> {output}'
	params: partition = chr1_partitions
	resources: cpus= chr1_cpus, mem_mb= chr1_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr2:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr2.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr2.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr2.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr2.R'
	message:
		'Processing Variant Recalibration with Indels for chr2 -> {output}'
	params: partition = chr2_partitions
	resources: cpus= chr2_cpus, mem_mb= chr2_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr3:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr3.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr3.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr3.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr3.R'
	message:
		'Processing Variant Recalibration with Indels for chr3 -> {output}'
	params: partition = chr3_partitions
	resources: cpus= chr3_cpus, mem_mb= chr3_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr4:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr4.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr4.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr4.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr4.R'
	message:
		'Processing Variant Recalibration with Indels for chr4 -> {output}'
	params: partition = chr4_partitions
	resources: cpus= chr4_cpus, mem_mb= chr4_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr5:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr5.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr5.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr5.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr5.R'
	message:
		'Processing Variant Recalibration with Indels for chr5 -> {output}'
	params: partition = chr5_partitions
	resources: cpus= chr5_cpus, mem_mb= chr5_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr6:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr6.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr6.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr6.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr6.R'
	message:
		'Processing Variant Recalibration with Indels for chr6 -> {output}'
	params: partition = chr6_partitions
	resources: cpus= chr6_cpus, mem_mb= chr6_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr7:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr7.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr7.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr7.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr7.R'
	message:
		'Processing Variant Recalibration with Indels for chr7 -> {output}'
	params: partition = chr7_partitions
	resources: cpus= chr7_cpus, mem_mb= chr7_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr8:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr8.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr8.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr8.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr8.R'
	message:
		'Processing Variant Recalibration with Indels for chr8 -> {output}'
	params: partition = chr8_partitions
	resources: cpus= chr8_cpus, mem_mb= chr8_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr9:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr9.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr9.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr9.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr9.R'
	message:
		'Processing Variant Recalibration with Indels for chr9 -> {output}'
	params: partition = chr9_partitions
	resources: cpus= chr9_cpus, mem_mb= chr9_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr10:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr10.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr10.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr10.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr10.R'
	message:
		'Processing Variant Recalibration with Indels for chr10 -> {output}'
	params: partition = chr10_partitions
	resources: cpus= chr10_cpus, mem_mb= chr10_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr11:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr11.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr11.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr11.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr11.R'
	message:
		'Processing Variant Recalibration with Indels for chr11 -> {output}'
	params: partition = chr11_partitions
	resources: cpus= chr11_cpus, mem_mb= chr11_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr12:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr12.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr12.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr12.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr12.R'
	message:
		'Processing Variant Recalibration with Indels for chr12 -> {output}'
	params: partition = chr12_partitions
	resources: cpus= chr12_cpus, mem_mb= chr12_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr13:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr13.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr13.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr13.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr13.R'
	message:
		'Processing Variant Recalibration with Indels for chr13 -> {output}'
	params: partition = chr13_partitions
	resources: cpus= chr13_cpus, mem_mb= chr13_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr14:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr14.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr14.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr14.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr14.R'
	message:
		'Processing Variant Recalibration with Indels for chr14 -> {output}'
	params: partition = chr14_partitions
	resources: cpus= chr14_cpus, mem_mb= chr14_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr15:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr15.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr15.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr15.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr15.R'
	message:
		'Processing Variant Recalibration with Indels for chr15 -> {output}'
	params: partition = chr15_partitions
	resources: cpus= chr15_cpus, mem_mb= chr15_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr16:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr16.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr16.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr16.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr16.R'
	message:
		'Processing Variant Recalibration with Indels for chr16 -> {output}'
	params: partition = chr16_partitions
	resources: cpus= chr16_cpus, mem_mb= chr16_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr17:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr17.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr17.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr17.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr17.R'
	message:
		'Processing Variant Recalibration with Indels for chr17 -> {output}'
	params: partition = chr17_partitions
	resources: cpus= chr17_cpus, mem_mb= chr17_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr18:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr18.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr18.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr18.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr1.R'
	message:
		'Processing Variant Recalibration with Indels for chr18 -> {output}'
	params: partition = chr18_partitions
	resources: cpus= chr18_cpus, mem_mb= chr18_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr19:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr19.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr19.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr19.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr19.R'
	message:
		'Processing Variant Recalibration with Indels for chr19 -> {output}'
	params: partition = chr19_partitions
	resources: cpus= chr19_cpus, mem_mb= chr19_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr20:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr20.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr20.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr20.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr20.R'
	message:
		'Processing Variant Recalibration with Indels for chr20 -> {output}'
	params: partition = chr20_partitions
	resources: cpus= chr20_cpus, mem_mb= chr20_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr21:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr21.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr21.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr21.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr21.R'
	message:
		'Processing Variant Recalibration with Indels for chr21 -> {output}'
	params: partition = chr21_partitions
	resources: cpus= chr21_cpus, mem_mb= chr21_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chr22:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr22.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr22.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr22.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chr22.R'
	message:
		'Processing Variant Recalibration with Indels for chr22 -> {output}'
	params: partition = chr22_partitions
	resources: cpus= chr22_cpus, mem_mb= chr22_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chrX:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chrX.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chrX.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chrX.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chrX.R'
	message:
		'Processing Variant Recalibration with Indels for chrX -> {output}'
	params: partition = chrX_partitions
	resources: cpus= chrX_cpus, mem_mb= chrX_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Variant_Recalibrator_Indels_chrY:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chrY.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chrY.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chrY.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots_chrY.R'
	message:
		'Processing Variant Recalibration with Indels for chrY -> {output}'
	params: partition = chrY_partitions
	resources: cpus= chrY_cpus, mem_mb= chrY_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
###_____________________________Applying_Recalibration_Indels_______________________________________________________________#
		
		
rule Applying_Recalibration_Indels_chr1:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr1.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr1.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr1.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr1.gz'
	params: partition = chr1_partitions
	resources: cpus= chr1_cpus, mem_mb= chr1_mem
	message:
		'Applying Recalibration with Indels for chr1 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr2:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr2.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr2.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr2.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr2.gz'
	params: partition = chr2_partitions
	resources: cpus= chr2_cpus, mem_mb= chr2_mem
	message:
		'Applying Recalibration with Indels for chr2 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr3:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr3.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr3.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr3.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr3.gz'
	params: partition = chr3_partitions
	resources: cpus= chr3_cpus, mem_mb= chr3_mem
	message:
		'Applying Recalibration with Indels for chr3 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr4:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr4.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr4.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr4.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr4.gz'
	params: partition = chr4_partitions
	resources: cpus= chr4_cpus, mem_mb= chr4_mem
	message:
		'Applying Recalibration with Indels for chr4 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr5:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr5.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr5.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr5.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr5.gz'
	params: partition = chr5_partitions
	resources: cpus= chr5_cpus, mem_mb= chr5_mem
	message:
		'Applying Recalibration with Indels for chr5 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr6:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr6.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr6.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr6.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr6.gz'
	params: partition = chr6_partitions
	resources: cpus= chr6_cpus, mem_mb= chr6_mem
	message:
		'Applying Recalibration with Indels for chr6 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr7:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr7.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr7.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr7.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr7.gz'
	params: partition = chr7_partitions
	resources: cpus= chr7_cpus, mem_mb= chr7_mem
	message:
		'Applying Recalibration with Indels for chr7 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr8:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr8.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr8.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr8.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr8.gz'
	params: partition = chr8_partitions
	resources: cpus= chr8_cpus, mem_mb= chr8_mem
	message:
		'Applying Recalibration with Indels for chr8 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr9:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr9.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr9.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr9.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr9.gz'
	params: partition = chr9_partitions
	resources: cpus= chr9_cpus, mem_mb= chr9_mem
	message:
		'Applying Recalibration with Indels for chr9 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr10:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr10.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr10.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr10.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr10.gz'
	params: partition = chr10_partitions
	resources: cpus= chr10_cpus, mem_mb= chr10_mem
	message:
		'Applying Recalibration with Indels for chr10 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr11:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr11.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr11.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr11.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr11.gz'
	params: partition = chr11_partitions
	resources: cpus= chr11_cpus, mem_mb= chr11_mem
	message:
		'Applying Recalibration with Indels for chr11 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr12:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr12.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr12.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr12.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr12.gz'
	params: partition = chr12_partitions
	resources: cpus= chr12_cpus, mem_mb= chr12_mem
	message:
		'Applying Recalibration with Indels for chr1 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr13:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr13.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr13.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr13.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr13.gz'
	params: partition = chr13_partitions
	resources: cpus= chr13_cpus, mem_mb= chr13_mem
	message:
		'Applying Recalibration with Indels for chr13 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr14:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr14.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr14.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr14.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr14.gz'
	params: partition = chr14_partitions
	resources: cpus= chr14_cpus, mem_mb= chr14_mem
	message:
		'Applying Recalibration with Indels for chr14 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr15:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr15.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr15.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr15.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr15.gz'
	params: partition = chr15_partitions
	resources: cpus= chr15_cpus, mem_mb= chr15_mem
	message:
		'Applying Recalibration with Indels for chr15 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr16:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr16.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr16.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr16.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr16.gz'
	params: partition = chr16_partitions
	resources: cpus= chr16_cpus, mem_mb= chr16_mem
	message:
		'Applying Recalibration with Indels for chr16 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr17:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr17.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr17.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr17.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr17.gz'
	params: partition = chr17_partitions
	resources: cpus= chr17_cpus, mem_mb= chr17_mem
	message:
		'Applying Recalibration with Indels for chr17 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr18:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr18.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr18.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr18.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr18.gz'
	params: partition = chr18_partitions
	resources: cpus= chr18_cpus, mem_mb= chr18_mem
	message:
		'Applying Recalibration with Indels for chr18 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr19:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr19.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr19.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr19.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr19.gz'
	params: partition = chr19_partitions
	resources: cpus= chr19_cpus, mem_mb= chr19_mem
	message:
		'Applying Recalibration with Indels for chr19 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr20:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr20.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr20.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr20.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr20.gz'
	params: partition = chr20_partitions
	resources: cpus= chr20_cpus, mem_mb= chr20_mem
	message:
		'Applying Recalibration with Indels for chr20 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr21:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr21.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr21.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr21.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr21.gz'
	params: partition = chr21_partitions
	resources: cpus= chr21_cpus, mem_mb= chr21_mem
	message:
		'Applying Recalibration with Indels for chr21 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chr22:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chr22.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr22.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chr22.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr22.gz'
	params: partition = chr22_partitions
	resources: cpus= chr22_cpus, mem_mb= chr22_mem
	message:
		'Applying Recalibration with Indels for chr22 -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chrX:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chrX.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chrX.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chrX.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chrX.gz'
	params: partition = chrX_partitions
	resources: cpus= chrX_cpus, mem_mb= chrX_mem
	message:
		'Applying Recalibration with Indels for chrX -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Applying_Recalibration_Indels_chrY:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels_chrY.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chrY.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_chrY.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chrY.gz'
	params: partition = chrY_partitions
	resources: cpus= chrY_cpus, mem_mb= chrY_mem
	message:
		'Applying Recalibration with Indels for chrY -> {output}'
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
###_______________________________Merge_Recalibrated_VCFs____________________________________________________#
		
		
rule Merge_Recalibrated_VCFs:
	input:
		vcf_chr1 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr1.gz',
		vcf_chr2 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr2.gz',
		vcf_chr3 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr3.gz',
		vcf_chr4 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr4.gz',
		vcf_chr5 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr5.gz',
		vcf_chr6 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr6.gz',
		vcf_chr7 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr7.gz',
		vcf_chr8 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr8.gz',
		vcf_chr9 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr9.gz',
		vcf_chr10 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr10.gz',
		vcf_chr11 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr11.gz',
		vcf_chr12 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr12.gz',
		vcf_chr13 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr13.gz',
		vcf_chr14 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr14.gz',
		vcf_chr15 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr15.gz',
		vcf_chr16 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr16.gz',
		vcf_chr17 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr17.gz',
		vcf_chr18 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr18.gz',
		vcf_chr19 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr19.gz',
		vcf_chr20 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr20.gz',
		vcf_chr21 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr21.gz',
		vcf_chr22 = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chr22.gz',
		vcf_chrX = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chrX.gz',
		vcf_chrY = main_dir + output_dir + '{sample}.recalibrated_variants.vcf_chrY.gz'
	output:
		merged_recalibrated_vcfs = main_dir + output_dir + '{sample}.recalibrated_variants.vcf.gz'
	message:
		'Merging all Recalibrated Vcfs -> {output}'
	params: partition = merge_recalibrated_vcf_partition
	resources: cpus= merge_recalibrated_vcf_cpus, mem_mb= merge_recalibrated_vcf_mem
	shell:
		'picard MergeVcfs \
		I={input.vcf_chr1} I={input.vcf_chr2} I={input.vcf_chr3} I={input.vcf_chr4} I={input.vcf_chr5} \
		I={input.vcf_chr6} I={input.vcf_chr7} I={input.vcf_chr8} I={input.vcf_chr9} I={input.vcf_chr10} I={input.vcf_chr11} \
		I={input.vcf_chr12} I={input.vcf_chr13} I={input.vcf_chr14} I={input.vcf_chr15} I={input.vcf_chr16} I={input.vcf_chr17} \
		I={input.vcf_chr18} I={input.vcf_chr19} I={input.vcf_chr20} I={input.vcf_chr21} I={input.vcf_chr22} I={input.vcf_chrX} I={input.vcf_chrY} \
		O={output.merged_recalibrated_vcfs}'
		
		       
###_______________________________Calculate_Genotype_Posteriors__________________________________________________#
		
		
rule Calculate_Genotype_Posteriors:
	input:
		jar = GATK,
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf.gz',
		ksites7 = main_dir + genome_dir + KS7
	output:
		recal_vcf_CGP = main_dir + output_dir + '{sample}_recalibrated_vcf.gz'
	message:
		'Calculating Genotype Posteriors -> {output}'
	params: partition = genotype_posteriors_partition
	resources: cpus= genotype_posteriors_cpus, mem_mb= genotype_posteriors_mem
	shell:
		'java -Xmx{resources.mem_mb}m -jar {input.jar} CalculateGenotypePosteriors \
		-V {input.recal_vcf} \
		-O {output.recal_vcf_CGP} \
		-supporting {input.ksites7}'


##________________________________________________________________________________________________________________//
