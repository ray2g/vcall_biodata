#|___________Settings:_______________|
#print('Insert configfile directory:("/path/vcall_pipeline/vcall_config.yaml")')
#config_f = input()
#print('Configfile: ',config_f)
#configfile: config_f

configfile:"/mnt/share/config_pipeline.yaml"


#|_________Threading_sets:___________|

bwa_samblaster_sambamba_threads = config["BWA_samblaster_sambamba_threads"]
call_variants_threads = config["Call_Variants_threads"]


#|__________Dir_settings:____________|

base_dir = config["base_dir"]
main_dir = config["main_dir"] 
genome_dir = config["genome_dir"]
sample_dir = config["sample_dir"] 
output_dir = config["output_dir"] 
logs_dir = config["logs_dir"]

GENOME = config["GENOME"]
KS1 = config["KS1"]
KS2 = config["KS2"]
KS3 = config["KS3"]
KS4 = config["KS4"]
KS5 = config["KS5"]
KS6 = config["KS6"]
KS7 = config["KS7"]

TARGET = config["TARGET"]

GATK = config["GATK"]



#|_______________Rules____________________|
#------------------------------------------------------------------------

rule bwa_index: #Create index, fasta.sa
	input:
		fa = main_dir + genome_dir + GENOME + ".fasta"
	output:
		main_dir + genome_dir + GENOME + '.fasta.sa'
	message:
		'Building index -> {output}'
	shell:
		'bwa index {input.fa}' 
		
		
rule BWA_samblaster_sambamba: #Align reads to reference (using BWA); 
	input:
		index = main_dir + genome_dir + GENOME + '.fasta.sa',
		ref = main_dir + genome_dir + GENOME + '.fasta',
		r_fow = main_dir + sample_dir + '{sample}.read1.fastq.gz', #R1
		r_rev = main_dir + sample_dir + '{sample}.read2.fastq.gz'  #R2
	output:
		align = main_dir + output_dir + '{sample}.alignment.bam'
		#bwa_ss = main_dir + output_dir + logs_dir +'{sample}.bwa_samblaster_sambamba.log'
	message:
		'Creating Alignment -> {output}'
	threads: bwa_samblaster_sambamba_threads
	shell: 
		'bwa mem -t {threads} -R "@RG\\tID:{wildcards.sample}\\tPL:ILLUMINA\\tSM:{wildcards.sample}" -M {input.ref} {input.r_fow} {input.r_rev} | '
		'samblaster -M |'
		'sambamba view -S -f bam -l 0 /dev/stdin |'#/dev/stdin 
		'sambamba sort -m 8G -t {threads} -o {output.align} /dev/stdin 2>&1'
		##+ ' > {output.bwa_ss}'#/dev/stdin 
		
		
"""
rule gatk3_register:
	input:
		GATK
	output:
		GATK
	message:
		'Register GATK3'
	shell:
		'gatk3-register {input}'
"""
		
rule picard_dict:
	input:
		main_dir + genome_dir + GENOME + '.fasta'
	output:
		main_dir + genome_dir + GENOME + '.dict'
	message:
		'Creating Dictionary with Picard -> {output}'
	shell:
		'picard CreateSequenceDictionary R={input} O={output}'
		
		
rule samtools_index:
	input:
		main_dir + genome_dir + GENOME + '.fasta'
	output:
		main_dir + genome_dir + GENOME + '.fasta.fai'
	message:
		'Creating index genome fasta file -> {output}'
	shell:
		'samtools faidx {input}'
		
		
rule gatk_BaseRecalibrator1: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bam = main_dir + output_dir + '{sample}.alignment.bam',
		target = TARGET
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data.grp',
		base_recal = main_dir + output_dir + logs_dir + '{sample}.base_recal.qsub'
	message:
		'BaseRecalibrator 1 -> {output}'
	shell:
		'java -Xmx16g -jar {input.jar} BaseRecalibrator -R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-I {input.bam} \
		-O {output.recal_data} \
		--interval-padding 100 -L {input.target} ' + '> {output.base_recal}'
		
		
rule gatk_BaseRecalibrator2: 
	input:
		jar = GATK,
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data.grp',
		bam = main_dir + '{sample}.alignment.bam',
		target = TARGET
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data.grp',
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2.qsub'
	message:
		'BaseRecalibrator 2 -> {output}'
	shell:
		'java -Xmx16g -jar {input.jar} BaseRecalibrator \
		-R {input.ref} \
		--known-sites {input.ksites1} \
		--known-sites {input.ksites2} \
		--known-sites {input.ksites3} \
		-bqsr {input.bqsr} \
		-I {input.bam} \
		-O {output.pos_recal_data} --interval-padding 100 -L {input.target}' + ' > {output.base_recal}'
		
		
rule Analyze_Covariates:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data.grp'
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots.pdf'
	message:
		'Analyzing Covariates -> {output}'
	shell:
		'java -Xmx16g -jar {input.jar} AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data} \
		-plots {output.pdf_log}'
		

"""		
rule Apply_recalibration: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam'#,
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal.qsub'
	message:
		'Applying Recalibration -> {output}'
	shell:
		'java -Xmx16g -jar {input.jar} PrintReads \
		-R {input.fa} \
		-I {input.bam} \
		-bqsr {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
"""		

rule Apply_BQSR: 
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data.grp',
		bam = main_dir + output_dir + '{sample}.alignment.bam',
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal.qsub'
	message:
		'Applying BQSR -> {output}'
	shell:
		'java -Xmx16g -jar {input.jar} ApplyBQSR \
		-R {input.fa} \
		-I {input.bam} \
		--bqsr-recal-file {input.bqsr} \
		-O {output.recal} \
		> {output.apply_recal}'
		
		
rule Call_Variants:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal.bam',
		ksites1 = main_dir + genome_dir + KS1,
		target = TARGET
	output:
		site = main_dir + output_dir + '{sample}.gvcf.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars.qsub'
	message:
		'Processing Call Variants -> {output}'
	threads: call_variants_threads
	shell:
		'java -Xmx16g -jar {input.jar} HaplotypeCaller \
		-R {input.fa} \
		-I {input.recal} \
		-D {input.ksites1} \
		-ip 100 -stand-call-conf 10 --emit-ref-confidence GVCF \
		--native-pair-hmm-threads {threads} \
		-O {output.site} \
        -L {input.target}' + ' > {output.logs}' 
		
		
rule Joint_Genotyping:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		site = main_dir + output_dir + '{sample}.gvcf.gz',
		ksites4 = main_dir + genome_dir + KS4
	output:
		vcf = main_dir + output_dir + '{sample}.vcf.gz'
	message:
		'Processing Joint Genotyping -> {output}'
	shell:
		'java -Xmx16g -jar {input.jar} GenotypeGVCFs \
		-R {input.fa} --max-alternate-alleles 5 \
		-V {input.site} \
		-O {output.vcf} --dbsnp {input.ksites4} -ip 100'
		
		
rule Variant_Recalibrator_SNPs:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf.gz',
		ksites1 = main_dir + genome_dir + KS1,
		ksites3 = main_dir + genome_dir + KS3,
		ksites5 = main_dir + genome_dir + KS5,
		ksites6 = main_dir + genome_dir + KS6
	output:
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP.recal',
		rscript_snp = main_dir + output_dir + '{sample}.recalibrate_SNP_plots.R',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP.tranches'
	message:
		'Processing Variant Recalibration for SNPs-> {output}'
	shell:
		'java -Xmx16g -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf} \
		-mode SNP -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 6 -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR \
		-O {output.recal_snp} \
		--tranches-file {output.tranches_snp} \
		--rscript-file {output.rscript_snp} \
        --resource:hapmap,known=false,training=true,truth=true,prior=15.0 {input.ksites5} \
		--resource:omni,known=false,training=true,truth=true,prior=12.0 {input.ksites6} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1} \
		--resource:1000G,known=false,training=true,truth=false,prior=10.0 {input.ksites3}'
		
		
rule Applying_Recalibration_SNPs:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf = main_dir + output_dir + '{sample}.vcf.gz',
		recal_snp = main_dir + output_dir + '{sample}.recalibrate_SNP.recal',
		tranches_snp = main_dir + output_dir + '{sample}.recalibrate_SNP.tranches'
	output:
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels.vcf'
	message:
		'Applying Recalibration for SNPs -> {output}'
	shell:
		'java -Xmx16g -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf} \
		-O {output.vcf_snp} \
		--recal-file {input.recal_snp} \
		--tranches-file {input.tranches_snp} \
		-truth-sensitivity-filter-level 99.5 \
		--create-output-variant-index true -mode SNP'
		
		
rule Variant_Recalibrator_Indels:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels.vcf',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2
	output:
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL.tranches',
		rscript_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL_plots.R'
	message:
		'Processing Variant Recalibration for Indels -> {output}'
	shell:
		'java -Xmx16g -jar {input.jar} VariantRecalibrator \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_indel} \
		--tranches-file {output.tranches_indel} \
		--rscript-file {output.rscript_indel} \
		-mode INDEL -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 \
		--max-gaussians 4 -an QD -an FS -an DP -an MQRankSum -an ReadPosRankSum -an SOR \
		--resource:mills,known=false,training=true,truth=true,prior=12.0 {input.ksites2} \
		--resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {input.ksites1}'
		
		
rule Applying_Recalibration_Indels:
	input:
		jar = GATK,
		fa = main_dir + genome_dir + GENOME + ".fasta",
		vcf_snp = main_dir + output_dir + '{sample}.recalibrated_snps_raw_indels.vcf',
		recal_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL.recal',
		tranches_indel = main_dir + output_dir + '{sample}.recalibrate_INDEL.tranches'
	output:
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf.gz'
	message:
		'Applying Recalibration for Indels -> {output}'
	shell:
		'java -Xmx16g -jar {input.jar} ApplyVQSR \
		-R {input.fa} \
		-V {input.vcf_snp} \
		-O {output.recal_vcf} \
		--recal-file {input.recal_indel} \
		--tranches-file {input.tranches_indel} \
		-truth-sensitivity-filter-level 99.0 \
		--create-output-variant-index true -mode INDEL'
		
		
rule Calculate_Genotype_Posteriors:
	input:
		jar = GATK,
		recal_vcf = main_dir + output_dir + '{sample}.recalibrated_variants.vcf.gz',
		ksites7 = main_dir + genome_dir + KS7
	output:
		recal_vcf_CGP = main_dir + output_dir + '{sample}.recalibrated_variants_postCGP.vcf.gz'
	message:
		'Calculating Genotype Posteriors -> {output}'
	shell:
		'java -Xmx16g -jar {input.jar} CalculateGenotypePosteriors \
		-V {input.recal_vcf} \
		-O {output.recal_vcf_CGP} \
		-supporting {input.ksites7}'
		
